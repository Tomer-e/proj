=========================-basic_test-=========================
Tensor("Shape:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice/stack)
[ 0  0 -1]
end (actual name = actor/strided_slice/stack_1)
[0 1 0]
strides (actual name = actor/strided_slice/stack_2)
[1 1 1]
begin_mask = 1
begin_mask = 1
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 1
end_mask_ba = 100
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 4
shrink_axis_mask_ba = 001

actual_begin [0 0 7]
actual_end [1 1 8]
[[[7]]]
Tensor("Shape_1:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice_1/stack)
[ 0  1 -1]
end (actual name = actor/strided_slice_1/stack_1)
[0 2 0]
strides (actual name = actor/strided_slice_1/stack_2)
[1 1 1]
begin_mask = 1
begin_mask = 1
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 1
end_mask_ba = 100
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 4
shrink_axis_mask_ba = 001

actual_begin [0 1 7]
actual_end [1 2 8]
[[[15]]]
Tensor("Shape_2:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice_2/stack)
[0 2 0]
end (actual name = actor/strided_slice_2/stack_1)
[0 3 0]
strides (actual name = actor/strided_slice_2/stack_2)
[1 1 1]
begin_mask = 5
begin_mask = 5
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 5
end_mask_ba = 101
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 0
shrink_axis_mask_ba = 000

actual_begin [0 2 0]
actual_end [1 3 8]
[[[16 17 18 19 20 21 22 23]]]
ExpandDims inputs[1] (dim) =  2
ExpandDims inputs[0] (values) =  [[[16 17 18 19 20 21 22 23]]]
ExpandDims values shape =  (1, 1, 8)
ExpandDims op.inputs[0].shape.dims =  [Dimension(None), Dimension(1), Dimension(8)]
[1, 1, 1, 8]
Squeeze inputs_ops =  [<tf.Operation 'actor/Conv1D/BiasAdd' type=BiasAdd>]
Squeeze prevValues =  [[[[ 950  951  952  953  954  955  956  957  958  959  960  961  962
     963  964  965  966  967  968  969  970  971  972  973  974  975
     976  977  978  979  980  981  982  983  984  985  986  987  988
     989  990  991  992  993  994  995  996  997  998  999 1000 1001
    1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014
    1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
    1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040
    1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053
    1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066
    1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077]]]]
Squeeze prevValues.shape =  (1, 1, 1, 128)
Squeeze squeeze_dims =  [2]
Squeeze axis =  []
i 0 val 1
i 1 val 1
i 2 val 1
removing 2 val 1
i 3 val 128
[1, 1, 128]
Tensor("Shape_3:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice_3/stack)
[0 3 0]
end (actual name = actor/strided_slice_3/stack_1)
[0 4 0]
strides (actual name = actor/strided_slice_3/stack_2)
[1 1 1]
begin_mask = 5
begin_mask = 5
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 5
end_mask_ba = 101
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 0
shrink_axis_mask_ba = 000

actual_begin [0 3 0]
actual_end [1 4 8]
[[[24 25 26 27 28 29 30 31]]]
ExpandDims inputs[1] (dim) =  2
ExpandDims inputs[0] (values) =  [[[24 25 26 27 28 29 30 31]]]
ExpandDims values shape =  (1, 1, 8)
ExpandDims op.inputs[0].shape.dims =  [Dimension(None), Dimension(1), Dimension(8)]
[1, 1, 1, 8]
Squeeze inputs_ops =  [<tf.Operation 'actor/Conv1D_1/BiasAdd' type=BiasAdd>]
Squeeze prevValues =  [[[[1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346
    1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359
    1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372
    1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385
    1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398
    1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411
    1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424
    1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437
    1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450
    1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461]]]]
Squeeze prevValues.shape =  (1, 1, 1, 128)
Squeeze squeeze_dims =  [2]
Squeeze axis =  []
i 0 val 1
i 1 val 1
i 2 val 1
removing 2 val 1
i 3 val 128
[1, 1, 128]
Tensor("Shape_4:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice_4/stack)
[0 4 0]
end (actual name = actor/strided_slice_4/stack_1)
[0 5 6]
strides (actual name = actor/strided_slice_4/stack_2)
[1 1 1]
begin_mask = 5
begin_mask = 5
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 1
end_mask_ba = 100
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 0
shrink_axis_mask_ba = 000

actual_begin [0 4 0]
actual_end [1 5 6]
[[[32 33 34 35 36 37]]]
ExpandDims inputs[1] (dim) =  2
ExpandDims inputs[0] (values) =  [[[32 33 34 35 36 37]]]
ExpandDims values shape =  (1, 1, 6)
ExpandDims op.inputs[0].shape.dims =  [Dimension(None), Dimension(1), Dimension(6)]
[1, 1, 1, 6]
Squeeze inputs_ops =  [<tf.Operation 'actor/Conv1D_2/BiasAdd' type=BiasAdd>]
Squeeze prevValues =  [[[[1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730
    1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743
    1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756
    1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769
    1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782
    1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795
    1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808
    1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821
    1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834
    1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845]]]]
Squeeze prevValues.shape =  (1, 1, 1, 128)
Squeeze squeeze_dims =  [2]
Squeeze axis =  []
i 0 val 1
i 1 val 1
i 2 val 1
removing 2 val 1
i 3 val 128
[1, 1, 128]
Tensor("Shape_5:0", shape=(3,), dtype=int32)
inputs (actual name = actor/InputData/X)
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
(1, 6, 8)
begin (actual name = actor/strided_slice_5/stack)
[ 0  5 -1]
end (actual name = actor/strided_slice_5/stack_1)
[0 6 0]
strides (actual name = actor/strided_slice_5/stack_2)
[1 1 1]
begin_mask = 1
begin_mask = 1
ellipsis_mask = 0
ellipsis_mask_ba = 000
end_mask = 1
end_mask_ba = 100
new_axis_mask = 0
new_axis_mask_ba = 000
shrink_axis_mask = 4
shrink_axis_mask_ba = 001

actual_begin [0 5 7]
actual_end [1 6 8]
[[[47]]]
ConcatV2 values =  [array([[310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
        323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
        336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
        349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
        362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
        375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
        388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
        414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426,
        427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437]]), array([[694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
        707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
        720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
        733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
        746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
        759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
        772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
        785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
        798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
        811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821]]), array([[1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
        1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
        1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
        1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
        1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
        1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
        1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
        1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
        1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
        1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
        1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
        1199, 1200, 1201, 1202, 1203, 1204, 1205]]), array([[1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
        1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
        1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
        1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
        1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
        1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
        1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
        1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
        1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
        1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
        1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
        1583, 1584, 1585, 1586, 1587, 1588, 1589]]), array([[1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
        1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
        1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
        1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
        1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
        1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
        1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
        1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
        1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
        1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
        1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
        1967, 1968, 1969, 1970, 1971, 1972, 1973]]), array([[2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
        2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251,
        2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
        2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273,
        2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284,
        2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295,
        2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306,
        2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,
        2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
        2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339,
        2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350,
        2351, 2352, 2353, 2354, 2355, 2356, 2357]]), array(1, dtype=int32)]
concat attr.N =   6
networkInputVars [array([[[ 0,  1,  2,  3,  4,  5,  6,  7],
        [ 8,  9, 10, 11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20, 21, 22, 23],
        [24, 25, 26, 27, 28, 29, 30, 31],
        [32, 33, 34, 35, 36, 37, 38, 39],
        [40, 41, 42, 43, 44, 45, 46, 47]]])]
inputVrs shape =  (1, 6, 8)
inputVars:
[[[ 0  1  2  3  4  5  6  7]
  [ 8  9 10 11 12 13 14 15]
  [16 17 18 19 20 21 22 23]
  [24 25 26 27 28 29 30 31]
  [32 33 34 35 36 37 38 39]
  [40 41 42 43 44 45 46 47]]]
last_chunk_bit_rate
7
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
39

Marabou results:

inputVar 0
inputVar 1
inputVar 2
inputVar 3
inputVar 4
inputVar 5
inputVar 6
inputVar 7
inputVar 8
inputVar 9
inputVar 10
inputVar 11
inputVar 12
inputVar 13
inputVar 14
inputVar 15
inputVar 16
inputVar 17
inputVar 18
inputVar 19
inputVar 20
inputVar 21
inputVar 22
inputVar 23
inputVar 24
inputVar 25
inputVar 26
inputVar 27
inputVar 28
inputVar 29
inputVar 30
inputVar 31
inputVar 32
inputVar 33
inputVar 34
inputVar 35
inputVar 36
inputVar 37
inputVar 38
inputVar 39
inputVar 40
inputVar 41
inputVar 42
inputVar 43
inputVar 44
inputVar 45
inputVar 46
inputVar 47
SAT
input 0 = 0.0
input 1 = 0.0
input 2 = 0.0
input 3 = 0.0
input 4 = 0.0
input 5 = 0.0
input 6 = 0.0
input 7 = 1.0
input 8 = 0.0
input 9 = 0.0
input 10 = 0.0
input 11 = 0.0
input 12 = 0.0
input 13 = 0.0
input 14 = 0.0
input 15 = 0.4
input 16 = 0.5005695217262222
input 17 = 0.5005695217262222
input 18 = 0.5005695217262222
input 19 = 0.5005695217262222
input 20 = 0.5005695217262222
input 21 = 0.5005695217262222
input 22 = 0.5005695217262222
input 23 = 0.5005695217262222
input 24 = 0.1985163352226155
input 25 = 0.1985163352226155
input 26 = 0.1985163352226155
input 27 = 0.1985163352226155
input 28 = 0.1985163352226155
input 29 = 0.1985163352226155
input 30 = 0.1985163352226155
input 31 = 0.1985163352226155
input 32 = 0.13953488372093023
input 33 = 0.3488372093023256
input 34 = 0.5581395348837209
input 35 = 0.8604651162790699
input 36 = 1.3255813953488373
input 37 = 2.0
input 38 = 0.0
input 39 = 0.020833333333333332
input 40 = 0.0
input 41 = 0.0
input 42 = 0.0
input 43 = 0.0
input 44 = 0.0
input 45 = 0.0
input 46 = 0.0
input 47 = 0.0
output 0 = 1585.503057357346
output 1 = 1394.8347964327745
output 2 = 1386.512783040232
output 3 = 1590.254737109654
output 4 = 1595.1912726419987
output 5 = 1590.254737109654
all_inputs =  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}
used_inputs =  {7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39}
marabou solve run result: SAT 
0 / 1
last_chunk_bit_rate:
var 7  =  1.0
current_buffer_size:
var 15  =  0.4
past_chunk_throughput:
var 16  =  0.5005695217262222
var 17  =  0.5005695217262222
var 18  =  0.5005695217262222
var 19  =  0.5005695217262222
var 20  =  0.5005695217262222
var 21  =  0.5005695217262222
var 22  =  0.5005695217262222
var 23  =  0.5005695217262222
past_chunk_download_time:
var 24  =  0.1985163352226155
var 25  =  0.1985163352226155
var 26  =  0.1985163352226155
var 27  =  0.1985163352226155
var 28  =  0.1985163352226155
var 29  =  0.1985163352226155
var 30  =  0.1985163352226155
var 31  =  0.1985163352226155
next_chunk_sizes:
var 32  =  0.13953488372093023
var 33  =  0.3488372093023256
var 34  =  0.5581395348837209
var 35  =  0.8604651162790699
var 36  =  1.3255813953488373
var 37  =  2.0
number_of_chunks_left:
var 39  =  0.020833333333333332
Engine::processInputQuery: Input query (before preprocessing): 919 equations, 2750 variables
Engine::processInputQuery: Input query (after preprocessing): 1031 equations, 1171 variables

Input bounds:


Engine::solve: Initial statistics

13:24:08 Statistics update:
	--- Time Statistics ---
	Total time elapsed: 6697 milli (00:00:06)
		Main loop: 0 milli (00:00:00)
		Preprocessing time: 6478 milli (00:00:06)
		Unknown: 218 milli (00:00:00)
	Breakdown for main loop:
		[0.00%] Simplex steps: 0 milli
		[0.00%] Explicit-basis bound tightening: 0 milli
		[0.00%] Constraint-matrix bound tightening: 0 milli
		[0.00%] Degradation checking: 0 milli
		[0.00%] Precision restoration: 0 milli
		[0.00%] Statistics handling: 0 milli
		[0.00%] Constraint-fixing steps: 0 milli
		[0.00%] Valid case splits: 0 milli. Average per split: 0.00 milli
		[0.00%] Applying stored bound-tightening: 0 milli
		[0.00%] SMT core: 0 milli
		[0.00%] Symbolic Bound Tightening: 0 milli
		[0.00%] Unaccounted for: 0 milli
	--- Preprocessor Statistics ---
	Number of preprocessor bound-tightening loop iterations: 6
	Number of eliminated variables: 2476
	Number of constraints removed due to variable elimination: 759
	Number of equations removed due to variable elimination: 0
	--- Engine Statistics ---
	Number of main loop iterations: 0
		0 iterations were simplex steps. Total time: 0 milli. Average: 0.00 milli.
		0 iterations were constraint-fixing steps. Total time: 0 milli. Average: 0.00 milli
	Number of active piecewise-linear constraints: 137 / 137
		Constraints disabled by valid splits: 0. By SMT-originated splits: 0
	Last reported degradation: 0.0000000000. Max degradation so far: 0.0000000000. Restorations so far: 0
	Number of simplex pivots we attempted to skip because of instability: 0.
	Unstable pivots performed anyway: 0
	--- Tableau Statistics ---
	Total number of pivots performed: 0
		Real pivots: 0. Degenerate: 0 (0.00%)
		Degenerate pivots by request (e.g., to fix a PL constraint): 0 (0.00%)
		Average time per pivot: 0.00 milli
	Total number of fake pivots performed: 0
	Total number of rows added: 0. Number of merged columns: 0
	Current tableau dimensions: M = 1031, N = 2202
	--- SMT Core Statistics ---
	Total depth is 0. Total visited states: 1. Number of splits: 0. Number of pops: 0
	Max stack depth: 0
	--- Bound Tightening Statistics ---
	Number of tightened bounds: 0.
		Number of rows examined by row tightener: 0. Consequent tightenings: 0
		Number of explicit basis matrices examined by row tightener: 0. Consequent tightenings: 0
		Number of bound tightening rounds on the entire constraint matrix: 0. Consequent tightenings: 0
		Number of bound notifications sent to PL constraints: 0. Tightenings proposed: 0
	--- Basis Factorization statistics ---
	Number of basis refactorizations: 2
	--- Projected Steepest Edge Statistics ---
	Number of iterations: 0.
	Number of resets to reference space: 1. Avg. iterations per reset: 0
	--- SBT ---
	Number of tightened bounds: 0

---
Before declaring SAT, recomputing...

Engine::solve: SAT assignment found

13:24:14 Statistics update:
	--- Time Statistics ---
	Total time elapsed: 12512 milli (00:00:12)
		Main loop: 5815 milli (00:00:05)
		Preprocessing time: 6478 milli (00:00:06)
		Unknown: 218 milli (00:00:00)
	Breakdown for main loop:
		[3.29%] Simplex steps: 191 milli
		[8.27%] Explicit-basis bound tightening: 480 milli
		[0.00%] Constraint-matrix bound tightening: 0 milli
		[0.00%] Degradation checking: 0 milli
		[0.00%] Precision restoration: 0 milli
		[0.00%] Statistics handling: 0 milli
		[0.03%] Constraint-fixing steps: 1 milli
		[88.38%] Valid case splits: 5139 milli. Average per split: 428.25 milli
		[0.02%] Applying stored bound-tightening: 1 milli
		[0.00%] SMT core: 0 milli
		[0.00%] Symbolic Bound Tightening: 0 milli
		[0.01%] Unaccounted for: 0 milli
	--- Preprocessor Statistics ---
	Number of preprocessor bound-tightening loop iterations: 6
	Number of eliminated variables: 2476
	Number of constraints removed due to variable elimination: 759
	Number of equations removed due to variable elimination: 0
	--- Engine Statistics ---
	Number of main loop iterations: 1
		185 iterations were simplex steps. Total time: 191 milli. Average: 1.03 milli.
		7 iterations were constraint-fixing steps. Total time: 1 milli. Average: 0.14 milli
	Number of active piecewise-linear constraints: 137 / 137
		Constraints disabled by valid splits: 0. By SMT-originated splits: 0
	Last reported degradation: 0.0000000000. Max degradation so far: 0.0000000000. Restorations so far: 0
	Number of simplex pivots we attempted to skip because of instability: 0.
	Unstable pivots performed anyway: 0
	--- Tableau Statistics ---
	Total number of pivots performed: 180
		Real pivots: 166. Degenerate: 14 (7.78%)
		Degenerate pivots by request (e.g., to fix a PL constraint): 5 (35.71%)
		Average time per pivot: 0.71 milli
	Total number of fake pivots performed: 10
	Total number of rows added: 26. Number of merged columns: 0
	Current tableau dimensions: M = 1057, N = 2228
	--- SMT Core Statistics ---
	Total depth is 0. Total visited states: 1. Number of splits: 0. Number of pops: 0
	Max stack depth: 0
	--- Bound Tightening Statistics ---
	Number of tightened bounds: 3900.
		Number of rows examined by row tightener: 175. Consequent tightenings: 89
		Number of explicit basis matrices examined by row tightener: 6. Consequent tightenings: 4055
		Number of bound tightening rounds on the entire constraint matrix: 0. Consequent tightenings: 0
		Number of bound notifications sent to PL constraints: 1656. Tightenings proposed: 391
	--- Basis Factorization statistics ---
	Number of basis refactorizations: 29
	--- Projected Steepest Edge Statistics ---
	Number of iterations: 185.
	Number of resets to reference space: 27. Avg. iterations per reset: 6
	--- SBT ---
	Number of tightened bounds: 0
